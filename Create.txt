create table EMPLOYEE
(EmployeeID varchar(9) not null,
Salary real not null,
Email varchar(30) not null,
Address varchar(30) not null,
Fname varchar(15) not null,
Lname varchar(15) not null,
HiredBy varchar(15) not null,
PRIMARY KEY (EmployeeID),
FOREIGN KEY (HiredBy) REFERENCES OWNER(Email),
FOREIGN KEY (HiredBy) REFERENCES PEOPLE(PersonID));


create table OWNER
(Email varchar(30) not null,
Fname varchar(15) not null,
Lname varchar(15) not null,
PRIMARY KEY (Email));


create table REGULATES
(CardNum int not null,
EmployeeID varchar(9) not null,
UNIQUE (EmployeeID),
FOREIGN KEY (EmployeeID) REFERENCES EMPLOYEE(EmployeeID),
PRIMARY KEY (CardNum));


create table REGISTERS
(PatronEmail varchar(30) not null,
EmployeeID varchar(9) not null,
UNIQUE (EmployeeID),
FOREIGN KEY (EmployeeID) REFERENCES EMPLOYEE(EmployeeID),
PRIMARY KEY (PatronEmail));


create table PATRON
(Email varchar(30) not null,
Address varchar(30) not null,
Fname varchar(15) not null,
Lname varchar(15) not null,
CardNum int not null,
PRIMARY KEY (Email));


create table MEDIA
(MediaID varchar(30) not null,
Title varchar(30) not null,
FOREIGN KEY (MediaID) REFERENCES PHYSICAL(PhysicalID),
FOREIGN KEY (MediaID) REFERENCES DIGITAL(DigitalID),
FOREIGN KEY (MediaID) REFERENCES ALBUMS(AlbumID),
FOREIGN KEY (MediaID) REFERENCES MOVIES(MovieID),
FOREIGN KEY (MediaID) REFERENCES BOOKS(BookID),
FOREIGN KEY (MediaID) REFERENCES MEDIABOUGHT(MediaID),
FOREIGN KEY (MediaID) REFERENCES MEDIABORROWED(MediaID),
PRIMARY KEY (MediaID));


create table PHYSICAL
(PhysicalID varchar(30) not null,
Location varchar(30) not null,
NumofCopies int not null,
FOREIGN KEY (PhysicalID) REFERENCES PRINTED(PrintID),
PRIMARY KEY (PhysicalID));


create table DIGITAL
(DigitalID varchar(30) not null,
License varchar(30) not null,
FOREIGN KEY (DigitallID) REFERENCES AUDIOBOOK(AudioID),
PRIMARY KEY (DigitalID));


create table PRINTED
(PrintID varchar(30) not null,
NumofPages int not null,
PRIMARY KEY (PrintID));


create table AUDIOBOOK
(AudioID varchar(30) not null,
Duration time not null,
PRIMARY KEY (AudioID));


Create table MEDIABORROWED (
        MediaID VARCHAR(30) NOT NULL,
        CheckedOutBy VARCHAR(30) NOT NULL,
        DueDate DATE NOT NULL,
        CheckedOutDate DATE NOT NULL,
        FOREIGN KEY(MediaID) REFERENCES MEDIA,
        PRIMARY KEY(MediaID)
);


Create table MEDIABOUGHT (
        MediaID VARCHAR(30) NOT NULL,
        PurchasedBy VARCHAR(30) NOT NULL,
        CopiesPurchased INT NOT NULL,
        ArrivalDate DATE NOT NULL,
        PRIMARY KEY (MediaID)
);


create table ALBUMS (
AlbumID VARCHAR(30) NOT NULL,
ReleaseDate DATE NOT NULL,
Genre varchar(15) NOT NULL,
Created By VARCHAR(9) NOT NULL,
PRIMARY KEY (AlbumID)
);


create table MOVIES (
MovieID VARCHAR(30) NOT NULL,
ReleaseDate DATE NOT NULL,
Genre VARCHAR(15) NOT NULL,
Length TIME NOT NULL,
Rating FLOAT(53) NOT NULL,
Created By VARCHAR(9) NOT NULL,
PRIMARY KEY (MovieID)
);


create table BOOKS
(        BookID varchar(30) NOT NULL,
        ReleaseDate DATE NOT NULL,
        Genre varchar(15) NOT NULL,
        CopiesOwned varchar(10) NOT NULL,
        CreatedBy varchar(9) NOT NULL,
        PRIMARY KEY(BookID),
        FOREIGN KEY(CreatedBy) REFERENCES PEOPLE(PersonID)
);


create table CHAPTERS
(        ChapterNum varchar(5) NOT NULL,
        NumofPages varchar(5) NOT NULL,
        Title varchar(30),
        InBook varchar(30) NOT NULL,
        PRIMARY KEY(ChapterNum),
        FOREIGN KEY(InBook) REFERENCES BOOKS(BookID)
);


create table PEOPLE
(        PersonID varchar(9) NOT NULL,
        Fname varchar(15) NOT NULL,
        Lname varchar(15) NOT NULL,
        StarsIn varchar(30),
        AuthorOf varchar(30),
        PRIMARY KEY(PersonID),
        FOREIGN KEY(StarsIn) REFERENCES MOVIES(MovieID),
        FOREIGN KEY(AuthorOf) REFERENCES BOOKS(BookID)
);


create table PEOPLEROLE
(        PersonID varchar(9) NOT NULL,
        Role varchar(15) NOT NULL,
        PRIMARY KEY(PersonID),
        FOREIGN KEY(PersonID) REFERENCES PEOPLE(PersonID)
);