PRAGMA foreign_keys = 'ON';

CREATE TABLE OWNER (
    Email VARCHAR (30) NOT NULL,
    Fname VARCHAR (15) NOT NULL,
    Lname VARCHAR (15) NOT NULL,
    PRIMARY KEY (
        Email
    )
);

CREATE TABLE EMPLOYEE (
    EmployeeID VARCHAR (10) NOT NULL,
    Salary     REAL         NOT NULL,
    Email      VARCHAR (30) NOT NULL,
    Address    VARCHAR (30) NOT NULL,
    Fname      VARCHAR (15) NOT NULL,
    Lname      VARCHAR (15) NOT NULL,
    HiredBy    VARCHAR (15) NOT NULL,
    PRIMARY KEY (
        EmployeeID
    ),
    FOREIGN KEY (
        HiredBy
    )
    REFERENCES OWNER (Email) 
);

CREATE TABLE REGULATES (
    CardNum    INT          NOT NULL,
    EmployeeID VARCHAR (10) NOT NULL,
    PRIMARY KEY (
        CardNum
    ),
    FOREIGN KEY (
        EmployeeID
    )
    REFERENCES EMPLOYEE (EmployeeID) 
);

CREATE TABLE REGISTERS (
    PatronEmail VARCHAR (30) NOT NULL,
    EmployeeID  VARCHAR (10) NOT NULL,
    PRIMARY KEY (
        PatronEmail
    ),
    FOREIGN KEY (
        EmployeeID
    )
    REFERENCES EMPLOYEE (EmployeeID) 
);

CREATE TABLE PATRON (
    Email   VARCHAR (30) NOT NULL,
    Address VARCHAR (30) NOT NULL,
    Fname   VARCHAR (15) NOT NULL,
    Lname   VARCHAR (15) NOT NULL,
    CardNum INT          NOT NULL,
    PRIMARY KEY (
        Email
    )
);

CREATE TABLE MEDIA (
    MediaID     INTEGER      PRIMARY KEY,
    Title       VARCHAR (30) NOT NULL,
    ReleaseDate DATE         NOT NULL,
    Genre       VARCHAR (30) NOT NULL,
    Type        VARCHAR (30) NOT NULL
);

CREATE TABLE MOVIES (
    MovieID  INTEGER    NOT NULL,
    Length   TIME       NOT NULL,
    Rating   FLOAT (53) NOT NULL,
    Actor    INTEGER    NOT NULL,
    Director INTEGER    NOT NULL,
    PRIMARY KEY (
        MovieID
    ),
    FOREIGN KEY (
        MovieID
    )
    REFERENCES MEDIA (MediaID),
    FOREIGN KEY (
        Actor
    )
    REFERENCES PEOPLE (PersonID) ON UPDATE CASCADE,
    FOREIGN KEY (
        Director
    )
    REFERENCES PEOPLE (PersonID) ON UPDATE CASCADE
);

CREATE TABLE TRACKS (
    TrackID    INTEGER      NOT NULL,
    Lenght     TIME         NOT NULL,
    AlbumTitle VARCHAR (30),
    Artist     INTEGER      NOT NULL,
    PRIMARY KEY (
        TrackID
    ),
    FOREIGN KEY (
        TrackID
    )
    REFERENCES MEDIA (MediaID),
    FOREIGN KEY (
        Artist
    )
    REFERENCES PEOPLE (PersonID) ON UPDATE CASCADE
);


CREATE TABLE BOOKS (
    BookID INTEGER NOT NULL,
    Author INTEGER NOT NULL,
    PRIMARY KEY (
        BookID
    ),
    FOREIGN KEY (
        BookID
    )
    REFERENCES MEDIA (MediaID),
    FOREIGN KEY (
        Author
    )
    REFERENCES PEOPLE (PersonID) ON UPDATE CASCADE
);

CREATE TABLE PRINTED (
    PrintID    INTEGER NOT NULL,
    NumofPages INT     NOT NULL,
    PRIMARY KEY (
        PrintID
    ),
    FOREIGN KEY (
        PrintID
    )
    REFERENCES BOOKS (BookID) 
);

CREATE TABLE AUDIOBOOK (
    AudioID  INTEGER NOT NULL,
    Duration TIME    NOT NULL,
    PRIMARY KEY (
        AudioID
    ),
    FOREIGN KEY (
        AudioID
    )
    REFERENCES BOOKS (BookID) 
);

CREATE TABLE PEOPLE (
    PersonID INTEGER      PRIMARY KEY,
    Fname    VARCHAR (15) NOT NULL,
    Lname    VARCHAR (15) NOT NULL
);

CREATE TABLE MEDIABORROWED (
    MediaID        INTEGER,
    CheckedOutBy   VARCHAR (30) NOT NULL,
    DueDate        DATE         NOT NULL,
    CheckedOutDate DATE         NOT NULL,
    PRIMARY KEY (
        MediaID
    ),
    FOREIGN KEY (
        MediaID
    )
    REFERENCES MEDIA (MediaID) ,
    FOREIGN KEY (
        CheckedOutBy
    )
    REFERENCES PATRON (Email) 
);

CREATE TABLE MEDIABOUGHT (
    MediaID         INTEGER,
    PurchasedBy     VARCHAR (30) NOT NULL,
    CopiesPurchased INT          NOT NULL,
    ArrivalDate     DATE         NOT NULL,
    PRIMARY KEY (
        MediaID
    ),
    FOREIGN KEY (
        MediaID
    )
    REFERENCES MEDIA (MediaID),
    FOREIGN KEY (
        PurchasedBy
    )
    REFERENCES OWNER (Email) 
);
